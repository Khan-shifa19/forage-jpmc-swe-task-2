From dbb1d7c4d32a74b66fa7219b729dc24c4693c734 Mon Sep 17 00:00:00 2001
From: Khan-shifa19 <107551104+Khan-shifa19@users.noreply.github.com>
Date: Mon, 28 Aug 2023 15:40:54 +0530
Subject: [PATCH] commit

---
 src/App.tsx   | 29 ++++++++++++++++++++++-------
 src/Graph.tsx | 13 ++++++++++---
 2 files changed, 32 insertions(+), 10 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..7ef9eaa 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -15,7 +16,8 @@ interface IState {
  * It renders title, button and Graph react element.
  */
 class App extends Component<{}, IState> {
-  constructor(props: {}) {
+  state: any;
+  constructor(...args: [props: {}]) {
     super(props);
 
     this.state = {
@@ -29,18 +31,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() =>{
+      DataStreamer.getData((serverresponds:ServerRespond[]) => {
+        this.setState({
+          data:serverresponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x>1000){
+        clearInterval(interval);
+      }
+    }, 100);
+  }
+  setState(arg0: { data: any[]; }) {
+    throw new Error('Method not implemented.');
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..defab37 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -25,6 +25,7 @@ interface PerspectiveViewerElement {
 class Graph extends Component<IProps, {}> {
   // Perspective table
   table: Table | undefined;
+  props: any;
 
   render() {
     return React.createElement('perspective-viewer');
@@ -32,7 +33,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem=document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -48,7 +49,13 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
-      elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]')
+      elem.setAttribute('aggregates','
+      {"stocks":"distinct count","top_ask_price":"avg" , "top_bid_price":"avg","timestamp":"distinct count"}'
+    );
     }
   }
 
-- 
2.41.0.windows.3

